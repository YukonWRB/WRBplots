#===============================================================================
# CONTINUITY PLOT FUNCTION
#===============================================================================
contPlot <- function(dat,
datevar = Date, yvar = VariableName,
color_var=NULL, color_title = NULL,
facet_var = NULL,
xlabel = NULL, ylabel = NULL,
title = NULL, subtitle=NULL){
p1 <- ggplot2::ggplot(data = dat, aes(x = {{datevar}}, y = {{yvar}})) +
ggplot2::geom_point(shape=1,
aes(color= if(is.null(color_var)){NULL} else factor(.data[[color_var]]))) +
#format date axis -- this will show yearly breaks
ggplot2::scale_x_date(date_breaks ="1 year", date_labels="%Y") +
#add lables/title
ggplot2::labs(
title=title ,
subtitle = subtitle,
color=color_title,
x=xlabel,
y=ylabel) +
#facet_by group
ggplot2::facet_grid(rows = vars({{facet_var}}),
scales="free_y", space="free", drop=TRUE,
labeller = label_wrap_gen(width = 17, multi_line = TRUE)) +
#add whatever theme elements you want
ggplot2::theme_bw() +
ggplot2::theme(
axis.title.x=element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "right",
legend.justification = "top",
theme(aspect.ratio=10))
return(p1)
}
The grid plot below are based on the number of unique Sample Numbers, and represent all variables.
Not all variables are collected for every SampleNumber.
contplot <- contPlot( dataset,
datevar = Date, yvar = VariableName,
color_var = NULL, color_title = NULL,
facet_var = Variable_Group,
xlabel = NULL, ylabel = NULL,
title = unique(metals$station_label),
subtitle=paste0("Record Period: ",  min(dataset$Date, na.rm=TRUE), " to ", max(dataset$Date, na.rm=TRUE)))
contPlot <- function(dat,
datevar = Date, yvar = VariableName,
color_var=NULL, color_title = NULL,
facet_var = NULL,
xlabel = NULL, ylabel = NULL,
title = NULL, subtitle=NULL){
p1 <- ggplot2::ggplot(data = dat, aes(x = {{datevar}}, y = {{yvar}})) +
ggplot2::geom_point(shape=1,
aes(color= if(is.null(color_var)){NULL} else factor(.data[[color_var]]))) +
#format date axis -- this will show yearly breaks
ggplot2::scale_x_date(date_breaks ="1 year", date_labels="%Y") +
#add lables/title
ggplot2::labs(
title=title ,
subtitle = subtitle,
color=color_title,
x=xlabel,
y=ylabel) +
#facet_by group
ggplot2::facet_grid(rows = vars({{facet_var}}),
scales="free_y", space="free", drop=TRUE,
labeller = label_wrap_gen(width = 17, multi_line = TRUE)) +
#add whatever theme elements you want
ggplot2::theme_bw() +
ggplot2::theme(
axis.title.x=element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "right",
legend.justification = "top",
aspect.ratio=10)
return(p1)
}
contplot <- contPlot( dataset,
datevar = Date, yvar = VariableName,
color_var = NULL, color_title = NULL,
facet_var = Variable_Group,
xlabel = NULL, ylabel = NULL,
title = unique(metals$station_label),
subtitle=paste0("Record Period: ",  min(dataset$Date, na.rm=TRUE), " to ", max(dataset$Date, na.rm=TRUE)))
contplot
contPlot <- function(dat,
datevar = Date, yvar = VariableName,
color_var=NULL, color_title = NULL,
facet_var = NULL,
xlabel = NULL, ylabel = NULL,
title = NULL, subtitle=NULL){
p1 <- ggplot2::ggplot(data = dat, aes(x = {{datevar}}, y = {{yvar}})) +
ggplot2::geom_point(shape=1,
aes(color= if(is.null(color_var)){NULL} else factor(.data[[color_var]]))) +
#format date axis -- this will show yearly breaks
ggplot2::scale_x_date(date_breaks ="1 year", date_labels="%Y") +
#add lables/title
ggplot2::labs(
title=title ,
subtitle = subtitle,
color=color_title,
x=xlabel,
y=ylabel) +
#facet_by group
ggplot2::facet_grid(rows = vars({{facet_var}}),
scales="free_y", drop=TRUE,
labeller = label_wrap_gen(width = 17, multi_line = TRUE)) +
#add whatever theme elements you want
ggplot2::theme_bw() +
ggplot2::theme(
axis.title.x=element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "right",
legend.justification = "top",
aspect.ratio=10)
return(p1)
}
contplot <- contPlot( dataset,
datevar = Date, yvar = VariableName,
color_var = NULL, color_title = NULL,
facet_var = Variable_Group,
xlabel = NULL, ylabel = NULL,
title = unique(metals$station_label),
subtitle=paste0("Record Period: ",  min(dataset$Date, na.rm=TRUE), " to ", max(dataset$Date, na.rm=TRUE)))
contplot
contPlot <- function(dat,
datevar = Date, yvar = VariableName,
color_var=NULL, color_title = NULL,
facet_var = NULL,
xlabel = NULL, ylabel = NULL,
title = NULL, subtitle=NULL){
p1 <- ggplot2::ggplot(data = dat, aes(x = {{datevar}}, y = {{yvar}})) +
ggplot2::geom_point(shape=1,
aes(color= if(is.null(color_var)){NULL} else factor(.data[[color_var]]))) +
#format date axis -- this will show yearly breaks
ggplot2::scale_x_date(date_breaks ="1 year", date_labels="%Y") +
#add lables/title
ggplot2::labs(
title=title ,
subtitle = subtitle,
color=color_title,
x=xlabel,
y=ylabel) +
#facet_by group
ggplot2::facet_grid(rows = vars({{facet_var}}),
scales="free_y", drop=TRUE,
labeller = label_wrap_gen(width = 17, multi_line = TRUE)) +
#add whatever theme elements you want
ggplot2::theme_bw() +
ggplot2::theme(
axis.title.x=element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "right",
legend.justification = "top",
aspect.ratio=2)
return(p1)
}
contplot <- contPlot( dataset,
datevar = Date, yvar = VariableName,
color_var = NULL, color_title = NULL,
facet_var = Variable_Group,
xlabel = NULL, ylabel = NULL,
title = unique(metals$station_label),
subtitle=paste0("Record Period: ",  min(dataset$Date, na.rm=TRUE), " to ", max(dataset$Date, na.rm=TRUE)))
contplot <- contPlot( dataset,
datevar = Date, yvar = VariableName,
color_var = NULL, color_title = NULL,
facet_var = Variable_Group,
xlabel = NULL, ylabel = NULL,
title = unique(metals$station_label),
subtitle=paste0("Record Period: ",  min(dataset$Date, na.rm=TRUE), " to ", max(dataset$Date, na.rm=TRUE)))
contplot
contPlot <- function(dat,
datevar = Date, yvar = VariableName,
color_var=NULL, color_title = NULL,
facet_var = NULL,
xlabel = NULL, ylabel = NULL,
title = NULL, subtitle=NULL){
p1 <- ggplot2::ggplot(data = dat, aes(x = {{datevar}}, y = {{yvar}})) +
ggplot2::geom_point(shape=1,
aes(color= if(is.null(color_var)){NULL} else factor(.data[[color_var]]))) +
#format date axis -- this will show yearly breaks
ggplot2::scale_x_date(date_breaks ="1 year", date_labels="%Y") +
#add lables/title
ggplot2::labs(
title=title ,
subtitle = subtitle,
color=color_title,
x=xlabel,
y=ylabel) +
#facet_by group
ggplot2::facet_grid(rows = vars({{facet_var}}),
scales="free_y", drop=TRUE,
labeller = label_wrap_gen(width = 17, multi_line = TRUE)) +
#add whatever theme elements you want
ggplot2::theme_bw() +
ggplot2::theme(
axis.title.x=element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "right",
legend.justification = "top",
aspect.ratio=1)
return(p1)
}
contplot <- contPlot( dataset,
datevar = Date, yvar = VariableName,
color_var = NULL, color_title = NULL,
facet_var = Variable_Group,
xlabel = NULL, ylabel = NULL,
title = unique(metals$station_label),
subtitle=paste0("Record Period: ",  min(dataset$Date, na.rm=TRUE), " to ", max(dataset$Date, na.rm=TRUE)))
contplot
contPlot <- function(dat,
datevar = Date, yvar = VariableName,
color_var=NULL, color_title = NULL,
facet_var = NULL,
xlabel = NULL, ylabel = NULL,
title = NULL, subtitle=NULL){
p1 <- ggplot2::ggplot(data = dat, aes(x = {{datevar}}, y = {{yvar}})) +
ggplot2::geom_point(shape=1,
aes(color= if(is.null(color_var)){NULL} else factor(.data[[color_var]]))) +
#format date axis -- this will show yearly breaks
ggplot2::scale_x_date(date_breaks ="1 year", date_labels="%Y") +
#add lables/title
ggplot2::labs(
title=title ,
subtitle = subtitle,
color=color_title,
x=xlabel,
y=ylabel) +
#facet_by group
ggplot2::facet_grid(rows = vars({{facet_var}}),
scales="free_y", drop=TRUE,
labeller = label_wrap_gen(width = 17, multi_line = TRUE)) +
#add whatever theme elements you want
ggplot2::theme_bw() +
ggplot2::theme(
axis.title.x=element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "right",
legend.justification = "top",
aspect.ratio=0.3)
return(p1)
}
contplot <- contPlot( dataset,
datevar = Date, yvar = VariableName,
color_var = NULL, color_title = NULL,
facet_var = Variable_Group,
xlabel = NULL, ylabel = NULL,
title = unique(metals$station_label),
subtitle=paste0("Record Period: ",  min(dataset$Date, na.rm=TRUE), " to ", max(dataset$Date, na.rm=TRUE)))
contplot
contPlot <- function(dat,
datevar = Date, yvar = VariableName,
color_var=NULL, color_title = NULL,
facet_var = NULL,
xlabel = NULL, ylabel = NULL,
title = NULL, subtitle=NULL){
p1 <- ggplot2::ggplot(data = dat, aes(x = {{datevar}}, y = {{yvar}})) +
ggplot2::geom_point(shape=1,
aes(color= if(is.null(color_var)){NULL} else factor(.data[[color_var]]))) +
#format date axis -- this will show yearly breaks
ggplot2::scale_x_date(date_breaks ="1 year", date_labels="%Y") +
#add lables/title
ggplot2::labs(
title=title ,
subtitle = subtitle,
color=color_title,
x=xlabel,
y=ylabel) +
#facet_by group
ggplot2::facet_grid(rows = vars({{facet_var}}),
scales="free_y", space="free", drop=TRUE,
labeller = label_wrap_gen(width = 17, multi_line = TRUE)) +
#add whatever theme elements you want
ggplot2::theme_bw() +
ggplot2::theme(
axis.title.x=element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "right",
legend.justification = "top")
return(p1)
}
figpth
figpth = function(x) {paste0('figures/', params$site, "/")}
#function to calc number of parameters for the site -- helps for trend-barplot height.
calc_height <- function(f) length(unique(f))
#calculate plot length based on the number of parameters
len <- 2 + 0.2 * calc_height(dataset$VariableName)
dataset %>%
group_by(StationID, station_name, station_label, year, month) %>%
#group_by(StationID, station_name, station_label,  Variable_Group, VariableName, year, month) %>%
summarize(nsamples = n_distinct(SampleNumber), .groups="drop")
#unique sampleNumber count by station
cnts <- dataset %>%
group_by(StationID, station_name, station_label, year, month) %>%
#group_by(StationID, station_name, station_label,  Variable_Group, VariableName, year, month) %>%
summarize(nsamples = n_distinct(SampleNumber), .groups="drop") %>% #based on number of unique SampleNumber
#complete for all year/months
pdat <-  dataset %>% select(StationID, station_name, station_label, year, month, nsamples)
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE,
fig.path= paste0('figures/', params$site, "/"))  #figures/SITE_NO
figpth = function(x) {paste0('figures/', params$site, "/")}
library(here)
#tidyverse
library(tidyverse)  #installs ggplot2, purrr, tibble, dplyr, tidyr, string, readr, forcats
library(stringr)
library(glue)
library(kableExtra)
library(cowplot)
#source("your-script.R", local = knitr::knit_global())
#Note that we used include = FALSE in the above example because we only want to execute the script without showing any output
source(here::here("R", "contPlot.R"), local = knitr::knit_global())
source(here::here("R", "read_ECCC_csv.R"), local = knitr::knit_global())
#load data and filter for station
dataset <- read_rds(here::here("data", "alldata.rds")) %>%
filter(StationID == params$site)
site_lab <- unique(dataset$station_label)
#create figures/site-id directory -- figpth is function with pth created in setup
#dir.create(figpth(), recursive=TRUE)
stn_by_var_summary <- dataset %>%
group_by(StationID, station_name,  Variable_Group, VariableName) %>%
summarize(date_range = paste0(min(year, na.rm=TRUE), "-", max(year, na.rm=TRUE)),
startDate = min(Date, na.rm=TRUE),
endDate = max(Date, na.rm = TRUE),
nyrs = max(year, na.rm=TRUE) - min(year, na.rm=TRUE) + 1,
nyrs_wData = n_distinct(year),
n = n(),
ncen = sum(Flag == "L", na.rm=TRUE),
nsamples = n_distinct(SampleNumber),
nunits = n_distinct(UnitCode),
nVMVs = n_distinct(VMVCode),
.groups = "drop")
#format headers
sum_tbl <- stn_by_var_summary %>%
arrange(Variable_Group, VariableName) %>%
select(Variable_Group, VariableName,
date_range, startDate, endDate,
nyrs, nyrs_wData,
#n,
nsamples, ncen,
nunits, nVMVs)
colnms <-   c("Group", "Variable",
"Range", "Start Date", "End Date",
"No. years", "No. year with Data",
#"n",
"No. Samples*.", "%BDL",
"No. Units", "No. VMVs")
names(sum_tbl) <- colnms
#names(sum_tbl)[c(1:2,14)] <- cell_spec(names(restbl)[c(1:2,14)], color="white")
#create kable table
sum_tbl_kbl <-  sum_tbl %>%
kable(#col.names=colnms,
escape = F, caption="Station Record Summary",
align = c("l","l", rep("c", 9)),
table.attr = "style = \"color: #313132;\""
) %>%
kableExtra::kable_styling(bootstrap_options = c("hover", "condensed"),
full_width = F,  position = "left", fixed_thead = T, font_size = 10) %>%
kableExtra::add_header_above(c("Variable"=2, "Record Period" = 3, "Data Record"=6),
color=c("white", "#313132", "#313132"), line =c(F,T,T)) %>%
kableExtra::column_spec(1, width = "1cm") %>%
kableExtra::column_spec(2, width = "4cm") %>%
kableExtra::column_spec(3:5, width = "3cm") %>%
kableExtra::collapse_rows(columns = 1, valign = "top") %>%
kableExtra::footnote(general = c("No. Samples = number of unique SampleNumber"))
sum_tbl_kbl
#unique sampleNumber count by station
cnts <- dataset %>%
group_by(StationID, station_name, station_label, year, month) %>%
#group_by(StationID, station_name, station_label,  Variable_Group, VariableName, year, month) %>%
summarize(nsamples = n_distinct(SampleNumber), .groups="drop") %>% #based on number of unique SampleNumber
#complete for all year/months
pdat <-  dataset %>% select(StationID, station_name, station_label, year, month, nsamples)
library(tidyverse#unique sampleNumber count by station
cnts <- dataset %>%
group_by(StationID, station_name, station_label, year, month) %>%
#group_by(StationID, station_name, station_label,  Variable_Group, VariableName, year, month) %>%
summarize(nsamples = n_distinct(SampleNumber), .groups="drop"))
glimpse(cnb)
cnts <- dataset %>%
group_by(StationID, station_name, station_label, year, month) %>%
#group_by(StationID, station_name, station_label,  Variable_Group, VariableName, year, month) %>%
summarize(nsamples = n_distinct(SampleNumber), .groups="drop"))
cnts <- dataset %>%
group_by(StationID, station_name, station_label, year, month) %>%
#group_by(StationID, station_name, station_label,  Variable_Group, VariableName, year, month) %>%
summarize(nsamples = n_distinct(SampleNumber), .groups="drop")
glimspe(cnt)
glimspe(cnts)
glimpse(gnts)
glimpse(cnts)
#get and add totals by year
yr_total <-  dataset %>%
group_by(StationID, station_name, station_label, year) %>%
summarise(nsamples = sum(nsamples, na.rm=TRUE), .groups="drop") %>%
mutate(month = "Total")
#get and add totals by year
yr_total <-   cnts %>%
group_by(StationID, station_name, station_label, year) %>%
summarise(nsamples = sum(nsamples, na.rm=TRUE), .groups="drop") %>%
mutate(month = "Total")
glimpse(yr_total)
pdat <- bind_rows(cnts, yr_total) %>%
mutate(monthName= factor('Total', c(month.abb, "Total"), ordered = TRUE))
pdat <- bind_rows(cnts, yr_total) %>%
mutate(monthName= factor(month, c(month.abb, "Total"), ordered = TRUE))
#unique sampleNumber count by station
cnts <- dataset %>%
group_by(StationID, station_name, station_label, year, month) %>%
#group_by(StationID, station_name, station_label,  Variable_Group, VariableName, year, month) %>%
summarize(nsamples = n_distinct(SampleNumber), .groups="drop") %>% #based on number of unique SampleNumber
#complete for all year/months
tidyr::complete(year = full_seq(year,1), month=full_seq(month,1)) %>%
dplyr::mutate(monthName = factor(month.abb[month], c(month.abb), ordered = TRUE))
#get and add totals by year
yr_total <-   cnts %>%
group_by(StationID, station_name, station_label, year) %>%
summarise(nsamples = sum(nsamples, na.rm=TRUE), .groups="drop") %>%
mutate(monthName = "Total")
pdat <- bind_rows(cnts, yr_total) %>%
mutate(monthName= factor(monthName c(month.abb, "Total"), ordered = TRUE))
pdat <- bind_rows(cnts, yr_total) %>%
mutate(monthName= factor(monthName, c(month.abb, "Total"), ordered = TRUE))
glimpse(pdat)
glimpse(pdat$monthName)
levels(pdat$monthName)
ggplot(pdat , aes(x=factor(monthName), y=factor(year))) +
geom_tile(color="black", aes(fill=factor(nsamples)))
unique(dataset$SITE_NO)
unique(dataset$stationID
)
unique(dataset$StationID)
ggplot(pdat %>% filter(monthName != Total) , aes(x=factor(monthName), y=factor(year))) +
geom_tile(color="black", aes(fill=factor(nsamples)))
ggplot(pdat %>% filter(monthName != Total) , aes(x=factor(monthName), y=factor(year))) +
geom_tile(color="black", aes(fill=factor(nsamples))) +
geom_text(aes(label = nsamples), size=2) +
scale_fill_brewer(palette = "Greens", na.value = "white")
ggplot(pdat %>% filter(monthName != "Total") , aes(x=factor(monthName), y=factor(year))) +
geom_tile(color="black", aes(fill=factor(nsamples))) +
geom_text(aes(label = nsamples), size=2) +
scale_fill_brewer(palette = "Greens", na.value = "white")
ggplot(pdat %>% filter(monthName != "Total") , aes(x=factor(monthName), y=factor(year))) +
geom_tile(color="black", aes(fill=factor(nsamples))) +
geom_text(aes(label = nsamples), size=2) +
scale_fill_brewer(palette = "Greens", na.value = "white") +
#add totals
geom_point(data = pdat %>% filter(monthName == "Total"), size = 5, shape = 19, color="white") +
geom_text(data = pdat %>% filter(monthName == "Total"), size = 2, aes(label = nsamples), face="bold")
ggplot(pdat %>% filter(monthName != "Total") , aes(x=factor(monthName), y=factor(year))) +
geom_tile(color="black", aes(fill=factor(nsamples))) +
geom_text(aes(label = nsamples), size=2) +
scale_fill_brewer(palette = "Greens", na.value = "white") +
#add totals
geom_point(data = pdat %>% filter(monthName == "Total"), size = 7, shape = 19, color="white") +
geom_text(data = pdat %>% filter(monthName == "Total"), size = 2, aes(label = nsamples), face="bold")
ggplot(cnts , aes(x=factor(monthName), y=factor(year))) +
geom_tile(color="black", aes(fill=factor(nsamples))) +
geom_text(aes(label = nsamples), size=2) +
scale_fill_brewer(palette = "Greens", na.value = "white") +
#add totals
geom_point(data =  yr_total , size = 7, shape = 19, color="white") +
geom_text(data =  yr_total , size = 2, aes(label = nsamples), face="bold")
ggplot(cnts , aes(x=factor(monthName), y=factor(year))) +
geom_tile(color="black", aes(fill=factor(nsamples))) +
geom_text(aes(label = nsamples), size=2) +
scale_fill_brewer(palette = "Greens", na.value = "white") +
#add totals
geom_point(data =  yr_total , size = 12, shape = 19, color="white") +
geom_text(data =  yr_total , size = 4, aes(label = nsamples), face="bold")
glimpse(yr_total)
unique(yr_total$nsamples)
#unique sampleNumber count by station
cnts <- dataset %>%
group_by(StationID, station_name, station_label, year, month) %>%
#group_by(StationID, station_name, station_label,  Variable_Group, VariableName, year, month) %>%
summarize(nsamples = n_distinct(SampleNumber), .groups="drop") %>% #based on number of unique SampleNumber
#complete for all year/months
tidyr::complete(year = full_seq(year,1), month=full_seq(month,1)) %>%
dplyr::mutate(monthName = factor(month.abb[month], c(month.abb), ordered = TRUE))
#get and add totals by year
yr_total <-   cnts %>%
group_by(StationID, station_name, station_label, year) %>%
summarise(nsamples = sum(nsamples, na.rm=TRUE), .groups="drop") %>%
mutate(monthName = "Total")
#create plot
p <- ggplot(cnts , aes(x=factor(monthName), y=factor(year))) +
geom_tile(color="black", aes(fill=factor(nsamples))) +
geom_text(aes(label = nsamples), size=2) +
scale_fill_brewer(palette = "Greens", na.value = "white") +
#add totals
geom_point(data =  yr_total , size = 12, shape = 19, color="white") +
geom_text(data =  yr_total , size = 4, aes(label = nsamples), face="bold") +
#format plot
theme_bw() +
ggplot2::theme(
axis.title=element_blank(),
#axis.text.x = element_text(angle = 90, vjust = 0.5),
legend.position = "right",
legend.justification = "top",
panel.grid.major.x = element_blank()
#panel.grid.minor = element_blank(),
#panel.background=element_rect(fill="white")
) +
ggplot2::labs(
subtitle=unique(cnts$station_label),
title = title,
fill = "Cnt of SampleNo",
x=NULL,
y=NULL)
p
unique(cnts$station_label)
